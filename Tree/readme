Binary Tree is a data structure consisted of nodes containing data and two references to other nodes, one on the left and one on the right.

Binary Tree consist of Nodes

Tree definitions:

    Binary Search Tree is a tree for all nodes the next rule works: left children value <= current node value <= right children value
    Balanced tree is a tree where the depth of the left and right subtrees of every node differ by 1 or less
    Full Binary Tree is a tree every node other than the leaves has two children
    Perfect Binary Tree is a full binary tree in which all leaves are at the same depth or same level, and in which every parent has two children
    Complete Binary Tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible
    Heap is a specialized tree-based data structure that satisfies the heap property: If A is a parent node of B then the key (the value) of node A is ordered with respect to the key of node B with the same ordering applying across the heap. A heap can be classified further as either a "max heap" or a "min heap". In a max heap, the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node. In a min heap, the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node. Heaps are crucial in several efficient graph algorithms such as Dijkstra's algorithm, and in the sorting algorithm heapsort. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. In Java, PriorityQueue is important to know.

Classic Tree problems (on Java)

Size
Returns the number of nodes in the tree

Max Depth
Returns the max root-to-leaf depth of the tree
